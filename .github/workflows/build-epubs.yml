name: Build EPUBs

on:
  push:
    branches:
      - main
    paths:
      - '**/chapters/**/*.md'
      - '**/book*/**/*.md'
  workflow_dispatch:

jobs:
  build-epubs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to detect changes
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Detect changed books
      id: detect-changes
      run: |
        # Try to get changed files from the last commit
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          # We have a previous commit, compare with it
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md)$' | grep -E '(chapters|book[0-9]+)' || true)
        else
          # No previous commit, check all markdown files in chapters directories
          echo "No previous commit found, checking all chapter files"
          CHANGED_FILES=$(find . -path "*/chapters/*.md" -o -path "*/book*/**/*.md" | grep -E '\.(md)$' || true)
        fi
        
        echo "Changed files detected:"
        echo "$CHANGED_FILES"
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "No chapter files found"
          echo "changed_books=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Extract unique book paths from changed files
        BOOKS=$(echo "$CHANGED_FILES" | sed -E 's|^([^/]+/[^/]+/[^/]+)/.*|\1|' | sort -u | grep -E '^[^/]+/book[0-9]+/[^/]+$' || true)
        
        if [ -z "$BOOKS" ]; then
          echo "No valid book paths found in changes"
          echo "changed_books=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Changed books:"
        echo "$BOOKS"
        echo "changed_books<<EOF" >> $GITHUB_OUTPUT
        echo "$BOOKS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Build EPUBs for changed books
      if: steps.detect-changes.outputs.changed_books != ''
      id: build-changed
      run: |
        cd tools/epub
        
        # Parse the changed books
        echo "${{ steps.detect-changes.outputs.changed_books }}" | while read -r book_path; do
          if [ -z "$book_path" ]; then
            continue
          fi
          
          # Extract components from path (e.g., "eol-saga/book1/english")
          story=$(echo "$book_path" | cut -d'/' -f1)
          book=$(echo "$book_path" | cut -d'/' -f2)
          language=$(echo "$book_path" | cut -d'/' -f3)
          
          echo "Building EPUB for: $story/$book/$language"
          
          # Find the highest chapter number
          chapters_dir="../../$book_path/chapters"
          if [ ! -d "$chapters_dir" ]; then
            chapters_dir="../../$book_path"
          fi
          
          if [ ! -d "$chapters_dir" ]; then
            echo "Warning: No chapters directory found for $book_path"
            continue
          fi
          
          # Find the highest chapter number
          highest_chapter=$(find "$chapters_dir" -name "chapter-*.md" | sed 's/.*chapter-\([0-9]*\)\.md/\1/' | sort -n | tail -1)
          
          if [ -z "$highest_chapter" ]; then
            echo "Warning: No chapter files found in $chapters_dir"
            continue
          fi
          
          # Format chapter number with leading zeros
          formatted_chapter=$(printf "chapter-%03d" "$highest_chapter")
          
          echo "Building EPUB up to: $formatted_chapter"
          
          # Create output directory
          output_dir="../../$book_path/epubs"
          mkdir -p "$output_dir"
          
          # Build EPUB
          python3 epub_builder.py "$story" "$book" "$language" "$formatted_chapter" "$output_dir"
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully built EPUB for $story/$book/$language"
          else
            echo "❌ Failed to build EPUB for $story/$book/$language"
            exit 1
          fi
        done
    
    - name: Build EPUBs for all books (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      id: build-all
      run: |
        cd tools/epub
        
        # Find all book directories
        find ../../ -path "*/book*/**/chapters" -type d | while read -r chapters_dir; do
          # Extract book path components
          book_path=$(dirname "$chapters_dir" | sed 's|../../||')
          story=$(echo "$book_path" | cut -d'/' -f1)
          book=$(echo "$book_path" | cut -d'/' -f2)
          language=$(echo "$book_path" | cut -d'/' -f3)
          
          echo "Building EPUB for: $story/$book/$language"
          
          # Find the highest chapter number
          highest_chapter=$(find "$chapters_dir" -name "chapter-*.md" | sed 's/.*chapter-\([0-9]*\)\.md/\1/' | sort -n | tail -1)
          
          if [ -z "$highest_chapter" ]; then
            echo "Warning: No chapter files found in $chapters_dir"
            continue
          fi
          
          # Format chapter number with leading zeros
          formatted_chapter=$(printf "chapter-%03d" "$highest_chapter")
          
          echo "Building EPUB up to: $formatted_chapter"
          
          # Create output directory
          output_dir="../../$book_path/epubs"
          mkdir -p "$output_dir"
          
          # Build EPUB
          python3 epub_builder.py "$story" "$book" "$language" "$formatted_chapter" "$output_dir"
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully built EPUB for $story/$book/$language"
          else
            echo "❌ Failed to build EPUB for $story/$book/$language"
            exit 1
          fi
        done
    
    - name: Create branch and commit EPUBs
      if: steps.detect-changes.outputs.changed_books != '' || github.event_name == 'workflow_dispatch'
      run: |
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Create a new branch for the EPUB changes
        BRANCH_NAME="epub-build-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        # Check if there are any EPUB files to commit
        if git diff --name-only | grep -q '\.epub$' || git ls-files --others --exclude-standard | grep -q '\.epub$'; then
          echo "Committing EPUB changes to branch: $BRANCH_NAME"
          git add -A
          git commit -m "Auto-build EPUBs for changed books [skip ci]"
          git push origin "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "✅ EPUB files committed to branch: $BRANCH_NAME"
        else
          echo "No EPUB changes to commit"
        fi
    
    - name: Create Pull Request
      if: (steps.detect-changes.outputs.changed_books != '' || github.event_name == 'workflow_dispatch') && env.BRANCH_NAME != ''
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.BRANCH_NAME }}
        title: "📚 Auto-build EPUBs for changed books"
        body: |
          ## 📚 EPUB Build Summary
          
          This PR contains automatically generated EPUB files.
          
          ${{ github.event_name == 'workflow_dispatch' && '**Trigger:** Manual workflow dispatch' || '**Trigger:** Automatic (chapter changes detected)' }}
          
          ${{ steps.detect-changes.outputs.changed_books != '' && format('**Changed books:**\n{0}', steps.detect-changes.outputs.changed_books) || '**Scope:** All books in repository' }}
          
          **Generated EPUB files:**
          ${{ steps.detect-changes.outputs.epub_summary }}
          
          ---
          
          This PR was automatically created by the EPUB build workflow.
          
          **Files included:**
          - EPUB files with cover pages and proper metadata
          - All chapters up to the highest available chapter number
          - Proper EPUB structure and navigation
        commit-message: "Auto-build EPUBs for changed books"
        delete-branch: true
    
    - name: List generated EPUBs
      if: steps.detect-changes.outputs.changed_books != '' || github.event_name == 'workflow_dispatch'
      run: |
        echo "Generated EPUB files:"
        find . -name "*.epub" -type f | while read -r epub_file; do
          echo "📖 $epub_file"
          ls -lh "$epub_file"
        done
        
        # Create summary for output
        echo "epub_summary<<EOF" >> $GITHUB_OUTPUT
        echo "## 📚 EPUB Build Summary" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "The following EPUB files were generated and committed:" >> $GITHUB_OUTPUT
        find . -name "*.epub" -type f | while read -r epub_file; do
          size=$(ls -lh "$epub_file" | awk '{print $5}')
          echo "- \`$epub_file\` ($size)" >> $GITHUB_OUTPUT
        done
        echo "" >> $GITHUB_OUTPUT
        echo "> EPUB files have been automatically committed to the repository." >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
